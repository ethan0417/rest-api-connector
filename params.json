{"tagline":"A config way to build a rest module","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Rest-api-connector","google":"","body":"<h1>REST API Connector</h1>\r\n\r\nThis is a utility for easy configure the rest api to a module. People who want to write a REST API node module, can use this for building one! Only config the rest url, invoke method (GET/POST/PUT/DELETE), and the field that the module will looks like, then the module help you to auto validate your input. If you want your user call a function that named: <b> getUser(userid, callback) </b> to use the api to get user. You only need to config a json like:\r\n<pre>\r\n{\r\n  getUser: {\r\n    url:\"/user/:userid\",\r\n    method: \"GET\",\r\n    input: [{name:\"userid\", value:'', type:\"string\", max:40, nullable:false, notvalidate: true}],\r\n    output: { status: ['ERROR','SUCCESS'], msg: \"\"}\r\n  }\r\n}\r\n</pre>\r\nThen the rest-api-connector will auto generate a module called: <b>getUser(userid, callback)</b> for you. And it will export for other js to use.\r\n\r\nOnly some steps, that you can build your node.js module to connect your rest service.\r\n<ul>\r\n<li>Prepare: Install it...<br/>npm install rest-api-connector</li>\r\n<li>Step1: Create a config file, that include the rest server ip, port, authentication, and url information.</li>\r\n<li>Step2: Create a module file, to require rest-api-connector. And config a object that include the rest connect information.</li>\r\n<li>Step3: Use the module that you create in the pre step, and the config object first level key will be your function name.</li>\r\n</ul>\r\n\r\n<h2>Step1. Sample Config File:</h2>\r\nTo config your api server information, currently only support for base64 authorization.\r\n<pre>\r\n{\r\n  \"API_CFG\": {\r\n    \"SERVER\":\"123.123.123.123\",\r\n    \"PORT\":80,\r\n    \"PROTOCAL\":\"http\",\r\n    \"USERNAME\":\"user\", //Will use for Authentication\r\n    \"PASSWORD\":\"passwd\", //Will use for Authentication \r\n    \"BASE_URL\":\"http://123.123.123.123\"\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Step2. Sample Module</h2>\r\nIn this step, you can create a sample module to operate your api service. You need to copy the api document about url, method, headers, and the input column information that include: type, size and some validator factor.\r\n<pre>\r\nvar api = require('rest-api-connector').api\r\n  , apiDef = {};\r\n\r\napiDef.firstApiCall = {\r\n  url:'/service1/:uuid',\r\n  method: 'GET',\r\n  //optional, if null, will use the\r\n  headers: {\"Authorization\": \"Basic \" + new Buffer('user:password').toString('base64')},  \r\n  cfg file setting\r\n  input: [\r\n    { name:\"uuid\", value:'', type:\"string\", max:40, nullable:false, notvalidate: true }\r\n  ],\r\n  output: {\r\n    status: ['ERROR','SUCCESS'], msg: \"\"\r\n  },\r\n  //optional, if null, will use default validator\r\n  validator: function(iargs){ \r\n    return {\"valid\":true};\r\n  },\r\n  //optional, just for descript\r\n  descript: \"Get zone information by uuid, the uuid is the unique id of smartmachine.\" \r\n};\r\n\r\n//The basic config for use...\r\napiDef.sencondApiCall = {\r\n  url:'/service2/:uuid',\r\n  method: 'GET',\r\n  input: [\r\n    { name:\"uuid\", value:'', type:\"string\", max:40, nullable:false }\r\n  ]\r\n};\r\n\r\n//Setup and compile the api node module\r\napi.build(__dirname+'/lib/api.cfg',apiDef);\r\nexports.invoke = api;\r\n</pre>\r\n\r\n<h2>Step3. Sample Use:</h2>\r\nYou can require the module you write in the step2 (ex: the instance is \"api\"), and you can use api.invoke.[your config]() to use your api.\r\n<pre>\r\nvar api = require('./sampleModule')\r\napi.invoke.firstApiCall('3a32da60-2782xx-xoooo-1234',function(e,r,body){\r\n  console.log(body);\r\n});\r\n</pre>\r\n\r\n<h2>Other way to use: Extract the API definition to file</h2>\r\n\r\n<h3>Setup connection information into json format</h3>\r\nFile: api.cfg\r\n<pre>\r\n{\r\n  API_CFG: {\r\n    \"USERNAME\": \"your api username\", //api password\r\n    \"PASSWORD\": \"your api password\", //api username\r\n    \"BASE_URL\": \"http://123.123.123.123:123\" //api url\r\n  }\r\n}\r\n</pre>\r\n\r\n<h3>Setup api definition into json format</h3>\r\nFile: apiDefinition.json\r\n<pre>\r\n{\r\n  \"apiCall\": {\r\n    \"url\":\"/service/:uuid\",\r\n    \"method\": \"GET\",\r\n    \"input\": [\r\n      { \"name\":\"id\", \"value\":\"\", \"type\":\"string\", \"max\":40, \"nullable\":false }\r\n    ]\r\n  }\r\n}\r\n</pre>\r\n\r\n<h3>Call the service</h3>\r\n<pre>\r\nvar api = require('rest-api-connector').api;\r\n\r\n//Setup and compile the api node module\r\napi.buildFromJson(\r\n  api.readJsonCfg(__dirname + '/api.cfg'),\r\n  api.readJsonCfg(__dirname + '/apiDefinition.json')\r\n);\r\n\r\n//Use the api module\r\napi.apiCall(uuid, function(e,r,d){\r\n  console.log(d);\r\n});\r\n</pre>\r\n\r\n<h2>Other way to use 2: Single file api server</h2>\r\nIf you don't metter that the json string will disturb your code format. You can merge all code in single file like:\r\n<pre>\r\nvar api = require('rest-api-connector').api;\r\n\r\n//Setup and compile the api node module\r\napi.buildFromJson(\r\n  { //define the api connection info\r\n    API_CFG: {\r\n      USERNAME: \"your api username\", //api password\r\n      PASSWORD: \"your api password\", //api username\r\n      BASE_URL: \"http://123.123.123.123:123\" //api url\r\n    }\r\n  },\r\n  { //define the api definition\r\n    apiCall: {\r\n      url:\"/service/:uuid\",\r\n      method: \"GET\",\r\n      input: [\r\n        { \"name\":\"id\", \"value\":\"\", \"type\":\"string\", \"max\":40, \"nullable\":false }\r\n      ]\r\n    }\r\n  }\r\n);\r\n\r\n//Use the api module \r\napi.apiCall(uuid, function(e,r,d){\r\n  console.log(d);\r\n});\r\n</pre>\r\n\r\n<br/>\r\n<h2>Form Post</h2>\r\nIf you want to post form data in the api module. You can just define the api like:\r\n<pre>\r\n  {\r\n    apiCall: {\r\n      url:\"/service/:uuid\",\r\n      method: \"GET\",\r\n      form: true, \r\n      input: [\r\n        { \"name\":\"id\", \"value\":\"\", \"type\":\"string\", \"max\":40, \"nullable\":false }\r\n      ]\r\n    }\r\n  }\r\n</pre>\r\nAnd then, you must put the form object (a json format object) to the n-2 arguments. The example:\r\n<pre>\r\napi.apiCall(uuid, {field1:123, field2:\"test field 2\"},  function(e,r,d){\r\n  if(e) console.log(e);\r\n  console.log(d);\r\n});\r\n</pre>\r\n\r\n<h2>The column of a api definition</h2>\r\nAPI definition will be the operation information of a api, that looks like:\r\n<pre>\r\n  {\r\n    apiCall: {\r\n      url:\"/service/:uuid\",\r\n      method: \"GET\",\r\n      form: true, \r\n      input: [\r\n        { \"name\":\"id\", \"value\":\"\", \"type\":\"string\", \"max\":40, \"nullable\":false }\r\n      ]\r\n    }\r\n  }\r\n</pre>\r\nThe all avaliable column of a apiCall (that will be generate to a api module function, that can present to other object to call) includes:\r\n<ul>\r\n  <li>url (string, cannot null): The rest request url for the apiCall. Like ExpressJS, you can use \":key\" for parameter input. It will merge with input for final rest request. </li>\r\n  <li>method (string, optional, default is GET): The rest request method. If empty, will use default method: GET.</li>\r\n  <li>headers (json object, optional): The rest request header. If empty, will check the connection definition's username and password for base64 authorization</li>\r\n  <li>form (true|false, optional): If true, will check the n-2 arguments must be a json object to be the form input.</li>\r\n  <li>input (json array, optional): The input configure for default validator use. If empty, will skip all check.</li>\r\n  <li>output (json object, optional): Define a sample output value. A dummy column for juest define.</li>\r\n  <li>validator (function, optional) If empty, will use default validator to parse the input definition</li>\r\n  <li>descript (string, optional): A definition column to record the api description.</li>\r\n</ul>\r\n\r\n<h2>All avaliable api default input parameter validator factors</h2>\r\nDefault validator will use the input config for validating the api module function that generated by api config. And the avaliable config for validate list bellow:\r\n<ul>\r\n  <li>name: String value, the name of the api input .</li>\r\n  <li>type: The input value's type.</li>\r\n  <li>max: The max size of a input parametet.</li>\r\n  <li>nullable: If true, the input cannot be a null value.</li>\r\n  <li>skipcheck: If true, will skip check process.</li>\r\n</ul>\r\n\r\n<h2>Future work!</h2>\r\n<ul>\r\n<li>CLI for generate the api definitions.</li>\r\n<li>Find the way to generate configure from ExpressJS or http.createServer.</li>\r\n</ul>\r\n"}